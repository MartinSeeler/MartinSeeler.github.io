html {
  box-sizing: border-box;
}

html * {
  box-sizing: inherit;
}

body {
  max-width: 960px;
  margin-left: auto;
  margin-right: auto;
}

article,
footer,
header,
section {
  display: block;
}

html {
  background: #fff;
  color: #000;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
}

html {
  font-family: sans-serif;
}

body {
  margin: 0;
}

a {
  background: transparent;
}

a:focus {
  outline: thin dotted;
}

a:hover,
a:active {
  outline: 0;
}

h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

h3 {
  font-size: 1.17em;
  margin: 1em 0;
}

img {
  border: 0;
}

button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

section {
  background-color: #fff;
  max-width: 80%;
  margin-left: auto;
  margin-right: auto;
}

section:after {
  content: "";
  display: table;
  clear: both;
}

section>*:nth-child(1n+1) {
  width: -webkit-calc(100%);
  width: calc(100%);
  float: left;
  clear: left;
  margin-left: 0;
  margin-right: 0;
}

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2Jvd2VyX2NvbXBvbmVudHMvbmV1dHJvbmNzcy9fbmV1dHJvbi5zY3NzIiwicGFydGlhbHMvX25vcm1hbGl6ZS5zY3NzIiwicGFydGlhbHMvX2N1cmF0aW9ucy5zY3NzIiwiLi4vYm93ZXJfY29tcG9uZW50cy9uZXV0cm9uY3NzL21vZHVsZXMvX2Zsb2F0Ym94LnNjc3MiLCIuLi9ib3dlcl9jb21wb25lbnRzL25ldXRyb25jc3MvbW9kdWxlcy9fdXRpbGl0aWVzLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMENBLEtBRUMscUJBQXVCLENBQ3ZCLE9BSUEsa0JBQW9CLENBQ3BCLEtBR0EsZ0JBQ0EsaUJBQ0EsaUJBQW1CLENBQ25CLGlGQ0RDLGFBQWUsQ0FDaEIsbUJBT0Msb0JBQXNCLENBS3ZCLHNCQU1DLGFBQ0EsUUFBVSxDQUNYLGtCQVFDLFlBQWMsQ0FDZixLQWVDLGdCQUNBLFdBQ0EsOEJBQ0EseUJBQTJCLENBQzVCLGtDQVNDLHNCQWhHaUMsQ0FpR2xDLEtBS0MsUUFBVSxDQUNYLEVBY0Msc0JBQXdCLENBSDFCLFFBUUksbUJBQXFCLENBUnpCLGlCQWVJLFNBQVcsQ0FDWixHQVlDLGNBQ0EsZUFwSWdCLENBcUlqQixHQUdDLGdCQUNBLGVBeElnQixDQXlJakIsR0FHQyxpQkFDQSxZQTVJYSxDQTZJZCxHQUdDLGNBQ0EsZUFoSmdCLENBaUpqQixHQUdDLGlCQUNBLGVBcEpnQixDQXFKakIsR0FHQyxpQkFDQSxlQXhKZ0IsQ0F5SmpCLFlBTUQsd0JBQTBCLENBQzNCLFNBTUMsZ0JBQWtCLENBQ25CLElBV0MsaUJBQW1CLENBQ3BCLEtBS0MsZ0JBQ0EsVUFBWSxDQUNiLGtCQWlCQyw2QkFJQSxhQUFlLENBQ2hCLElBS0MsZ0JBQ0EscUJBQ0Esb0JBQXNCLENBQ3ZCLEVBS0Msc0NBQXdDLENBQ3pDLGlCQWdCRyxXQUNBLFlBQWMsQ0FDZixNQU1ELGFBQWUsQ0FDaEIsUUFPQyxjQUNBLGNBQ0Esa0JBQ0EsdUJBQXlCLENBQzFCLElBR0MsVUFBWSxDQUNiLElBR0MsY0FBZ0IsQ0FDakIsSUFtREMsUUFBVSxDQUlYLGVBS0MsZUFBaUIsQ0FDbEIsT0FTQyxRQUFVLENBQ1gsU0FnQkMseUJBQ0EsYUFDQSw2QkFBK0IsQ0FDaEMsT0FRQyxTQUNBLFVBQ0Esa0JBQW9CLENBSXJCLDZCQVdDLG9CQUNBLGVBQ0EsU0FDQSx1QkFBeUIsQ0FJMUIsYUFLQyxrQkFBb0IsQ0FDckIsY0FTQyxtQkFBcUIsQ0FDdEIsMEVBY0MsMEJBQ0EsY0FBZ0IsQ0FJakIsaUNBTUMsY0FBZ0IsQ0FDakIsaURBT0csU0FDQSxTQUFXLENBQ1osU0FPRCxjQUNBLGtCQUFvQixDQUNyQixNQVNDLHlCQUNBLGdCQUFrQixDQUNuQixxQkFNRyw2QkFDQSxBQUVBLHNCQUF3QixDQVA1QixtR0FhTSx1QkFBeUIsQ0FiL0IsMkNBdUJJLHNCQUNBLFNBQVcsQ0FLWixRQzFnQkQsc0JDZ1FELGNBbFBBLGlCQUNBLGlCQUFtQixDRGhCcEIsY0V3Q0UsV0FDQSxjQUNBLFVBQVksQ0YxQ2QsMEJDa0VJLHlCQUFBLEFBQ0EsaUJBQUEsV0FVQyxXQU1DLGNBWUEsY0FBZ0IsQ0FHbEIiLCJmaWxlIjoibWFpbi5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgICAgIE5ldXRyb25DU1NcclxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuXHJcbi8vIFNldHRpbmdzIE1hbmFnZW1lbnRcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiRfbmV1dHJvbjogKFxyXG5cdGxheW91dDogKFxyXG5cdFx0Y29sdW1uLXBhZGRpbmc6IDRweCA4cHgsXHJcblx0XHRjb250YWluZXItbWF4LXdpZHRoOiA5NjBweCxcclxuXHRcdGZsdXNoLW1hcmdpbjogdHJ1ZSxcclxuXHRcdGZsdXNoLXBhZGRpbmc6IGZhbHNlXHJcblx0KSxcclxuXHRxdWVyeTogKFxyXG5cdFx0bW9iaWxlLW1heDogXHQ0NzlweCxcclxuXHRcdHBoYWJsZXQtbWF4OiBcdDc2N3B4LFxyXG5cdFx0dGFibGV0LW1heDogXHQxMDIzcHgsXHJcblx0XHRkZXNrdG9wLXNtbC1tYXg6XHQxMTk5cHgsXHJcblx0XHRkZXNrdG9wLW1pZC1tYXg6XHQxNzk5cHhcclxuXHQpXHJcbik7XHJcblxyXG5AZnVuY3Rpb24gc2V0dGluZygkbWFwX25hbWU6IFwiXCIsICRzZXR0aW5nOiBcIlwiKSB7XHJcblx0QGlmICRtYXBfbmFtZSAhPSBcIlwiIGFuZCAkc2V0dGluZyAhPSBcIlwiIHtcclxuXHRcdCRtYXA6IG1hcC1nZXQoJF9uZXV0cm9uLCRtYXBfbmFtZSk7XHJcblx0XHRAcmV0dXJuIG1hcC1nZXQoJG1hcCwgJHNldHRpbmcpO1xyXG5cdH1cclxufVxyXG5cclxuLy8gTW9kdWxlc1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5AaW1wb3J0IFwibW9kdWxlcy9mbG9hdGJveFwiO1xyXG5AaW1wb3J0IFwibW9kdWxlcy9xdWVyaWVzXCI7XHJcbkBpbXBvcnQgXCJtb2R1bGVzL3V0aWxpdGllc1wiO1xyXG5cclxuLy8gRGVmYXVsdCBTdHlsZXNcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gU2V0IHJvb3QgZWxlbWVudCB0byB1c2UgYm9yZGVyLWJveCBcclxuLy8gc2l6aW5nIGFuZCBzZXQgYWxsIGVsZW1lbnRzIG9uIHRoZSBwYWdlXHJcbi8vIHRvIGluaGVyaXQgYm9yZGVyLWJveCBzaXppbmcuIFxyXG5cclxuaHRtbCB7XHJcblx0LW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbn1cclxuXHJcbmh0bWwgKiB7XHJcblx0LW1vei1ib3gtc2l6aW5nOiBpbmhlcml0O1xyXG5cdGJveC1zaXppbmc6IGluaGVyaXQ7XHJcbn1cclxuXHJcbmJvZHkge1xyXG5cdG1heC13aWR0aDogc2V0dGluZyhcImxheW91dFwiLCBcImNvbnRhaW5lci1tYXgtd2lkdGhcIik7XHJcblx0bWFyZ2luLWxlZnQ6IGF1dG87XHJcblx0bWFyZ2luLXJpZ2h0OiBhdXRvO1xyXG59XHJcblxyXG4vLyBIZWxwZXIgRnVuY3Rpb25zXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4vL0FkZHMgYWxsIGl0ZW1zIGluIGEgbGlzdCBhbmQgcmV0dXJucyB0aGUgcmVzdWx0XHJcbkBmdW5jdGlvbiBuZXV0cm9uX3N1bSgkbGlzdCkge1xyXG5cdFxyXG5cdCR0b3RhbDogMDtcclxuXHRAZWFjaCAkZWxlbWVudCBpbiAkbGlzdCB7XHJcblx0XHQkdG90YWw6ICR0b3RhbCArICRlbGVtZW50O1xyXG5cdH1cclxuXHRAcmV0dXJuICR0b3RhbDtcclxuXHRcclxufVxyXG5cclxuQGZ1bmN0aW9uIG5ldXRyb25fZXh0cmFjdC1wb3NpdGlvbigkc2hvcnRoYW5kLCAkcG9zaXRpb24pIHtcclxuXHQkc2hvcnRoYW5kLWxlbmd0aDogbGVuZ3RoKCRzaG9ydGhhbmQpO1xyXG5cdFxyXG5cdC8vaWYgb25seSBvbmUgdmFyaWFibGUgcGFzc2VkLCByZXR1cm4gaXRcclxuXHRAaWYgJHNob3J0aGFuZC1sZW5ndGggPT0gMSB7XHJcblx0XHRAcmV0dXJuICRzaG9ydGhhbmQ7XHJcblx0fVxyXG5cdFxyXG5cdEBpZiAkc2hvcnRoYW5kLWxlbmd0aCA9PSAyIHtcclxuXHRcdEBpZiAkcG9zaXRpb24gPT0gdG9wIG9yICRwb3NpdGlvbiA9PSBib3R0b20ge1xyXG5cdFx0XHRAcmV0dXJuIG50aCgkc2hvcnRoYW5kLCAxKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0QGlmICRwb3NpdGlvbiA9PSBsZWZ0IG9yICRwb3NpdGlvbiA9PSByaWdodCB7XHJcblx0XHRcdEByZXR1cm4gbnRoKCRzaG9ydGhhbmQsIDIpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0QGlmICRzaG9ydGhhbmQtbGVuZ3RoID09IDMge1xyXG5cdFx0QGlmICRwb3NpdGlvbiA9PSB0b3Age1xyXG5cdFx0XHRAcmV0dXJuIG50aCgkc2hvcnRoYW5kLCAxKTtcclxuXHRcdH1cclxuXHJcblx0XHRAaWYgJHBvc2l0aW9uID09IGxlZnQgb3IgJHBvc2l0aW9uID09IHJpZ2h0IHtcclxuXHRcdFx0QHJldHVybiBudGgoJHNob3J0aGFuZCwgMik7XHJcblx0XHR9XHJcblxyXG5cdFx0QGlmICRwb3NpdGlvbiA9PSBib3R0b20ge1xyXG5cdFx0XHRAcmV0dXJuIG50aCgkc2hvcnRoYW5kLCAzKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdEBpZiAkc2hvcnRoYW5kLWxlbmd0aCA9PSA0IHtcclxuXHRcdEBpZiAkcG9zaXRpb24gPT0gdG9wIHtcclxuXHRcdFx0QHJldHVybiBudGgoJHNob3J0aGFuZCwgMSk7XHJcblx0XHR9XHJcblxyXG5cdFx0QGlmICRwb3NpdGlvbiA9PSByaWdodCB7XHJcblx0XHRcdEByZXR1cm4gbnRoKCRzaG9ydGhhbmQsIDIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdEBpZiAkcG9zaXRpb24gPT0gYm90dG9tIHtcclxuXHRcdFx0QHJldHVybiBudGgoJHNob3J0aGFuZCwgMyk7XHJcblx0XHR9XHJcblxyXG5cdFx0QGlmICRwb3NpdGlvbiA9PSBsZWZ0IHtcclxuXHRcdFx0QHJldHVybiBudGgoJHNob3J0aGFuZCwgNCk7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5cclxuLyotLS0tLS0tLS0gRW5kIG9mIE5ldXRyb25DU1MgLS0tLS0tLS0tKi9cclxuIiwiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIE5vcm1hbGl6ZS5zY3NzIGJhc2VkIG9uIE5pY29sYXMgR2FsbGFnaGVyIGFuZCBKb25hdGhhbiBOZWFsJ3Ncbi8vIG5vcm1hbGl6ZS5jc3MgdjIuMS4zIHwgTUlUIExpY2Vuc2UgfCBnaXQuaW8vbm9ybWFsaXplXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gTm9ybWFsaXplLnNjc3Mgc2V0dGluZ3Ncbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblxuLy8gU2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gYWRkIHN1cHBvcnQgZm9yIElFNiBhbmQgSUU3XG4vLyBOb3RpY2U6IHNldHRpbmcgdG8gdHJ1ZSBtaWdodCByZW5kZXIgc29tZSBlbGVtZW50c1xuLy8gc2xpZ2h0bHkgZGlmZmVyZW50bHkgdGhhbiB3aGVuIHNldCB0byBmYWxzZVxuJGxlZ2FjeV9zdXBwb3J0X2Zvcl9pZTogZmFsc2UgIWRlZmF1bHQ7IC8vIFVzZWQgYWxzbyBpbiBDb21wYXNzXG5cblxuLy8gU2V0IHRoZSBkZWZhdWx0IGZvbnQgZmFtaWx5IGhlcmUgc28geW91IGRvbid0IGhhdmUgdG8gb3ZlcnJpZGUgaXQgbGF0ZXJcbiRub3JtYWxpemVkX2ZvbnRfZmFtaWx5OiBzYW5zLXNlcmlmICFkZWZhdWx0O1xuXG4kbm9ybWFsaXplX2hlYWRpbmdzOiB0cnVlICFkZWZhdWx0O1xuXG4kaDFfZm9udF9zaXplOiAyZW0gIWRlZmF1bHQ7XG4kaDJfZm9udF9zaXplOiAxLjVlbSAhZGVmYXVsdDtcbiRoM19mb250X3NpemU6IDEuMTdlbSAhZGVmYXVsdDtcbiRoNF9mb250X3NpemU6IDFlbSAhZGVmYXVsdDtcbiRoNV9mb250X3NpemU6IDAuODNlbSAhZGVmYXVsdDtcbiRoNl9mb250X3NpemU6IDAuNzVlbSAhZGVmYXVsdDtcblxuJGgxX21hcmdpbjogMC42N2VtIDAgIWRlZmF1bHQ7XG4kaDJfbWFyZ2luOiAwLjgzZW0gMCAhZGVmYXVsdDtcbiRoM19tYXJnaW46IDFlbSAwICFkZWZhdWx0O1xuJGg0X21hcmdpbjogMS4zM2VtIDAgIWRlZmF1bHQ7XG4kaDVfbWFyZ2luOiAxLjY3ZW0gMCAhZGVmYXVsdDtcbiRoNl9tYXJnaW46IDIuMzNlbSAwICFkZWZhdWx0O1xuXG4kYmFja2dyb3VuZDogI2ZmZiAhZGVmYXVsdDtcbiRjb2xvcjogIzAwMCAhZGVmYXVsdDtcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEhUTUw1IGRpc3BsYXkgZGVmaW5pdGlvbnNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vIENvcnJlY3RzIGJsb2NrIGRpc3BsYXkgbm90IGRlZmluZWQgaW4gSUU2LzcvOC85ICYgRkYzXG5cbmFydGljbGUsXG5hc2lkZSxcbmRldGFpbHMsXG5maWdjYXB0aW9uLFxuZmlndXJlLFxuZm9vdGVyLFxuaGVhZGVyLFxuaGdyb3VwLFxubmF2LFxuc2VjdGlvbixcbnN1bW1hcnkge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuLy8gQ29ycmVjdHMgaW5saW5lLWJsb2NrIGRpc3BsYXkgbm90IGRlZmluZWQgaW4gSUU2LzcvOC85ICYgRkYzXG5cbmF1ZGlvLFxuY2FudmFzLFxudmlkZW8ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIEBpZiAkbGVnYWN5X3N1cHBvcnRfZm9yX2llIHtcbiAgICAqZGlzcGxheTogaW5saW5lO1xuICAgICp6b29tOiAxO1xuICB9XG59XG5cbi8vIDEuIFByZXZlbnRzIG1vZGVybiBicm93c2VycyBmcm9tIGRpc3BsYXlpbmcgJ2F1ZGlvJyB3aXRob3V0IGNvbnRyb2xzXG4vLyAyLiBSZW1vdmUgZXhjZXNzIGhlaWdodCBpbiBpT1M1IGRldmljZXNcblxuYXVkaW86bm90KFtjb250cm9sc10pIHtcbiAgZGlzcGxheTogbm9uZTsgLy8gMVxuICBoZWlnaHQ6IDA7IC8vIDJcbn1cblxuLy9cbi8vIEFkZHJlc3MgYFtoaWRkZW5dYCBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOS5cbi8vIEhpZGUgdGhlIGB0ZW1wbGF0ZWAgZWxlbWVudCBpbiBJRSwgU2FmYXJpLCBhbmQgRmlyZWZveCA8IDIyLlxuLy9cblxuW2hpZGRlbl0sIHRlbXBsYXRlIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEJhc2Vcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vIDEuIENvcnJlY3RzIHRleHQgcmVzaXppbmcgb2RkbHkgaW4gSUU2Lzcgd2hlbiBib2R5IGZvbnQtc2l6ZSBpcyBzZXQgdXNpbmcgZW0gdW5pdHNcbi8vICAgIGh0dHA6Ly9jbGFnbnV0LmNvbS9ibG9nLzM0OC8jYzc5MFxuLy8gMi4gUHJldmVudHMgaU9TIHRleHQgc2l6ZSBhZGp1c3QgYWZ0ZXIgb3JpZW50YXRpb24gY2hhbmdlLCB3aXRob3V0IGRpc2FibGluZyB1c2VyIHpvb21cbi8vICAgIHd3dy40NTZiZXJlYXN0cmVldC5jb20vYXJjaGl2ZS8yMDEwMTIvY29udHJvbGxpbmdfdGV4dF9zaXplX2luX3NhZmFyaV9mb3JfaW9zX3dpdGhvdXRfZGlzYWJsaW5nX3VzZXJfem9vbS9cblxuaHRtbCB7XG4gIEBpZiAkbGVnYWN5X3N1cHBvcnRfZm9yX2llIHtcbiAgICBmb250LXNpemU6IDEwMCU7IC8vIDFcbiAgfVxuICBiYWNrZ3JvdW5kOiAkYmFja2dyb3VuZDtcbiAgY29sb3I6ICRjb2xvcjtcbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOyAvLyAyXG4gIC1tcy10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOyAvLyAyXG59XG5cbi8vIEFkZHJlc3NlcyBmb250LWZhbWlseSBpbmNvbnNpc3RlbmN5IGJldHdlZW4gJ3RleHRhcmVhJyBhbmQgb3RoZXIgZm9ybSBlbGVtZW50cy5cblxuaHRtbCxcbmJ1dHRvbixcbmlucHV0LFxuc2VsZWN0LFxudGV4dGFyZWEge1xuICBmb250LWZhbWlseTogJG5vcm1hbGl6ZWRfZm9udF9mYW1pbHk7XG59XG5cbi8vIEFkZHJlc3NlcyBtYXJnaW5zIGhhbmRsZWQgaW5jb3JyZWN0bHkgaW4gSUU2LzdcblxuYm9keSB7XG4gIG1hcmdpbjogMDtcbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIExpbmtzXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyAxLiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBjb2xvciBmcm9tIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cbi8vIDIuIEFkZHJlc3NlcyBvdXRsaW5lIGRpc3BsYXllZCBvZGRseSBpbiBDaHJvbWVcbi8vIDMuIEltcHJvdmVzIHJlYWRhYmlsaXR5IHdoZW4gZm9jdXNlZCBhbmQgYWxzbyBtb3VzZSBob3ZlcmVkIGluIGFsbCBicm93c2Vyc1xuLy8gICAgcGVvcGxlLm9wZXJhLmNvbS9wYXRyaWNrbC9leHBlcmltZW50cy9rZXlib2FyZC90ZXN0XG5cbmEge1xuICAvLyAxXG5cbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG5cbiAgLy8gMlxuXG4gICY6Zm9jdXMge1xuICAgIG91dGxpbmU6IHRoaW4gZG90dGVkO1xuICB9XG5cbiAgLy8gM1xuXG4gICY6aG92ZXIsXG4gICY6YWN0aXZlIHtcbiAgICBvdXRsaW5lOiAwO1xuICB9XG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBUeXBvZ3JhcGh5XG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBBZGRyZXNzZXMgZm9udCBzaXplcyBhbmQgbWFyZ2lucyBzZXQgZGlmZmVyZW50bHkgaW4gSUU2Lzdcbi8vIEFkZHJlc3NlcyBmb250IHNpemVzIHdpdGhpbiAnc2VjdGlvbicgYW5kICdhcnRpY2xlJyBpbiBGRjQrLCBDaHJvbWUsIFM1XG5cbkBpZiAkbm9ybWFsaXplX2hlYWRpbmdzID09IHRydWUge1xuICBoMSB7XG4gICAgZm9udC1zaXplOiAkaDFfZm9udF9zaXplO1xuICAgIG1hcmdpbjogJGgxX21hcmdpbjtcbiAgfVxuXG4gIGgyIHtcbiAgICBmb250LXNpemU6ICRoMl9mb250X3NpemU7XG4gICAgbWFyZ2luOiAkaDJfbWFyZ2luO1xuICB9XG5cbiAgaDMge1xuICAgIGZvbnQtc2l6ZTogJGgzX2ZvbnRfc2l6ZTtcbiAgICBtYXJnaW46ICRoM19tYXJnaW47XG4gIH1cblxuICBoNCB7XG4gICAgZm9udC1zaXplOiAkaDRfZm9udF9zaXplO1xuICAgIG1hcmdpbjogJGg0X21hcmdpbjtcbiAgfVxuXG4gIGg1IHtcbiAgICBmb250LXNpemU6ICRoNV9mb250X3NpemU7XG4gICAgbWFyZ2luOiAkaDVfbWFyZ2luO1xuICB9XG5cbiAgaDYge1xuICAgIGZvbnQtc2l6ZTogJGg2X2ZvbnRfc2l6ZTtcbiAgICBtYXJnaW46ICRoNl9tYXJnaW47XG4gIH1cbn1cblxuLy8gQWRkcmVzc2VzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUUgOC85LCBTNSwgQ2hyb21lXG5cbmFiYnJbdGl0bGVdIHtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IGRvdHRlZDtcbn1cblxuLy8gQWRkcmVzc2VzIHN0eWxlIHNldCB0byAnYm9sZGVyJyBpbiBGRjMrLCBTNC81LCBDaHJvbWVcblxuYixcbnN0cm9uZyB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG5AaWYgJGxlZ2FjeV9zdXBwb3J0X2Zvcl9pZSB7XG4gIGJsb2NrcXVvdGUge1xuICAgIG1hcmdpbjogMWVtIDQwcHg7XG4gIH1cbn1cblxuLy8gQWRkcmVzc2VzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gUzUsIENocm9tZVxuXG5kZm4ge1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG59XG5cbi8vIEFkZHJlc3NlcyBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFNi83LzgvOVxuXG5tYXJrIHtcbiAgYmFja2dyb3VuZDogI2ZmMDtcbiAgY29sb3I6ICMwMDA7XG59XG5cbi8vIEFkZHJlc3NlcyBtYXJnaW5zIHNldCBkaWZmZXJlbnRseSBpbiBJRTYvN1xuQGlmICRsZWdhY3lfc3VwcG9ydF9mb3JfaWUge1xuICBwLFxuICBwcmUge1xuICAgIG1hcmdpbjogMWVtIDA7XG4gIH1cbn1cblxuLy8gQ29ycmVjdHMgZm9udCBmYW1pbHkgc2V0IG9kZGx5IGluIElFNiwgUzQvNSwgQ2hyb21lXG4vLyBlbi53aWtpcGVkaWEub3JnL3dpa2kvVXNlcjpEYXZpZGdvdGhiZXJnL1Rlc3Q1OVxuXG5jb2RlLFxua2JkLFxucHJlLFxuc2FtcCB7XG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIHNlcmlmO1xuICBAaWYgJGxlZ2FjeV9zdXBwb3J0X2Zvcl9pZSB7XG4gICAgX2ZvbnQtZmFtaWx5OiAnY291cmllciBuZXcnLCBtb25vc3BhY2U7XG4gIH1cbiAgZm9udC1zaXplOiAxZW07XG59XG5cbi8vIEltcHJvdmVzIHJlYWRhYmlsaXR5IG9mIHByZS1mb3JtYXR0ZWQgdGV4dCBpbiBhbGwgYnJvd3NlcnNcblxucHJlIHtcbiAgd2hpdGUtc3BhY2U6IHByZTtcbiAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG59XG5cbi8vIFNldCBjb25zaXN0ZW50IHF1b3RlIHR5cGVzLlxuXG5xIHtcbiAgcXVvdGVzOiBcIlxcMjAxQ1wiIFwiXFwyMDFEXCIgXCJcXDIwMThcIiBcIlxcMjAxOVwiO1xufVxuXG4vLyAxLiBBZGRyZXNzZXMgQ1NTIHF1b3RlcyBub3Qgc3VwcG9ydGVkIGluIElFNi83XG4vLyAyLiBBZGRyZXNzZXMgcXVvdGUgcHJvcGVydHkgbm90IHN1cHBvcnRlZCBpbiBTNFxuXG4vLyAxXG5AaWYgJGxlZ2FjeV9zdXBwb3J0X2Zvcl9pZSB7XG4gIHEge1xuICAgIHF1b3Rlczogbm9uZTtcbiAgfVxufVxuXG4vLyAyXG5xIHtcbiAgJjpiZWZvcmUsXG4gICY6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIGNvbnRlbnQ6IG5vbmU7XG4gIH1cbn1cblxuLy8gQWRkcmVzcyBpbmNvbnNpc3RlbnQgYW5kIHZhcmlhYmxlIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG5cbnNtYWxsIHtcbiAgZm9udC1zaXplOiA4MCU7XG59XG5cbi8vIFByZXZlbnRzIHN1YiBhbmQgc3VwIGFmZmVjdGluZyBsaW5lLWhlaWdodCBpbiBhbGwgYnJvd3NlcnNcbi8vIGdpc3QuZ2l0aHViLmNvbS80MTM5MzBcblxuc3ViLFxuc3VwIHtcbiAgZm9udC1zaXplOiA3NSU7XG4gIGxpbmUtaGVpZ2h0OiAwO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbn1cblxuc3VwIHtcbiAgdG9wOiAtMC41ZW07XG59XG5cbnN1YiB7XG4gIGJvdHRvbTogLTAuMjVlbTtcbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIExpc3RzXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBBZGRyZXNzZXMgbWFyZ2lucyBzZXQgZGlmZmVyZW50bHkgaW4gSUU2LzdcbkBpZiAkbGVnYWN5X3N1cHBvcnRfZm9yX2llIHtcbiAgZGwsXG4gIG1lbnUsXG4gIG9sLFxuICB1bCB7XG4gICAgbWFyZ2luOiAxZW0gMDtcbiAgfVxufVxuXG5AaWYgJGxlZ2FjeV9zdXBwb3J0X2Zvcl9pZSB7XG4gIGRkIHtcbiAgICBtYXJnaW46IDAgMCAwIDQwcHg7XG4gIH1cbn1cblxuLy8gQWRkcmVzc2VzIHBhZGRpbmdzIHNldCBkaWZmZXJlbnRseSBpbiBJRTYvN1xuQGlmICRsZWdhY3lfc3VwcG9ydF9mb3JfaWUge1xuICBtZW51LFxuICBvbCxcbiAgdWwge1xuICAgIHBhZGRpbmc6IDAgMCAwIDQwcHg7XG4gIH1cbn1cblxuLy8gQ29ycmVjdHMgbGlzdCBpbWFnZXMgaGFuZGxlZCBpbmNvcnJlY3RseSBpbiBJRTdcblxubmF2IHtcbiAgdWwsXG4gIG9sIHtcbiAgICBAaWYgJGxlZ2FjeV9zdXBwb3J0X2Zvcl9pZSB7XG4gICAgICBsaXN0LXN0eWxlLWltYWdlOiBub25lO1xuICAgIH1cbiAgfVxufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gRW1iZWRkZWQgY29udGVudFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gMS4gUmVtb3ZlcyBib3JkZXIgd2hlbiBpbnNpZGUgJ2EnIGVsZW1lbnQgaW4gSUU2LzcvOC85LCBGRjNcbi8vIDIuIEltcHJvdmVzIGltYWdlIHF1YWxpdHkgd2hlbiBzY2FsZWQgaW4gSUU3XG4vLyAgICBjb2RlLmZsaWNrci5jb20vYmxvZy8yMDA4LzExLzEyL29uLXVpLXF1YWxpdHktdGhlLWxpdHRsZS10aGluZ3MtY2xpZW50LXNpZGUtaW1hZ2UtcmVzaXppbmcvXG5cbmltZyB7XG4gIGJvcmRlcjogMDsgLy8gMVxuICBAaWYgJGxlZ2FjeV9zdXBwb3J0X2Zvcl9pZSB7XG4gICAgLW1zLWludGVycG9sYXRpb24tbW9kZTogYmljdWJpYzsgLy8gMlxuICB9XG59XG5cbi8vIENvcnJlY3RzIG92ZXJmbG93IGRpc3BsYXllZCBvZGRseSBpbiBJRTlcblxuc3ZnOm5vdCg6cm9vdCkge1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gRmlndXJlc1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gQWRkcmVzc2VzIG1hcmdpbiBub3QgcHJlc2VudCBpbiBJRTYvNy84LzksIFM1LCBPMTFcblxuZmlndXJlIHtcbiAgbWFyZ2luOiAwO1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gRm9ybXNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vIENvcnJlY3RzIG1hcmdpbiBkaXNwbGF5ZWQgb2RkbHkgaW4gSUU2LzdcbkBpZiAkbGVnYWN5X3N1cHBvcnRfZm9yX2llIHtcbiAgZm9ybSB7XG4gICAgbWFyZ2luOiAwO1xuICB9XG59XG5cbi8vIERlZmluZSBjb25zaXN0ZW50IGJvcmRlciwgbWFyZ2luLCBhbmQgcGFkZGluZ1xuXG5maWVsZHNldCB7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNjMGMwYzA7XG4gIG1hcmdpbjogMCAycHg7XG4gIHBhZGRpbmc6IDAuMzVlbSAwLjYyNWVtIDAuNzVlbTtcbn1cblxuLy8gMS4gQ29ycmVjdHMgY29sb3Igbm90IGJlaW5nIGluaGVyaXRlZCBpbiBJRTYvNy84Lzlcbi8vIDIuIFJlbW92ZSBwYWRkaW5nIHNvIHBlb3BsZSBhcmVuJ3QgY2F1Z2h0IG91dCBpZiB0aGV5IHplcm8gb3V0IGZpZWxkc2V0cy5cbi8vIDMuIENvcnJlY3RzIHRleHQgbm90IHdyYXBwaW5nIGluIEZGM1xuLy8gNC4gQ29ycmVjdHMgYWxpZ25tZW50IGRpc3BsYXllZCBvZGRseSBpbiBJRTYvN1xuXG5sZWdlbmQge1xuICBib3JkZXI6IDA7IC8vIDFcbiAgcGFkZGluZzogMDsgLy8gMlxuICB3aGl0ZS1zcGFjZTogbm9ybWFsOyAvLyAzXG4gIEBpZiAkbGVnYWN5X3N1cHBvcnRfZm9yX2llIHtcbiAgICAqbWFyZ2luLWxlZnQ6IC03cHg7IC8vIDRcbiAgfVxufVxuXG4vLyAxLiBDb3JyZWN0IGZvbnQgZmFtaWx5IG5vdCBiZWluZyBpbmhlcml0ZWQgaW4gYWxsIGJyb3dzZXJzLlxuLy8gMi4gQ29ycmVjdHMgZm9udCBzaXplIG5vdCBiZWluZyBpbmhlcml0ZWQgaW4gYWxsIGJyb3dzZXJzXG4vLyAzLiBBZGRyZXNzZXMgbWFyZ2lucyBzZXQgZGlmZmVyZW50bHkgaW4gSUU2LzcsIEZGMyssIFM1LCBDaHJvbWVcbi8vIDQuIEltcHJvdmVzIGFwcGVhcmFuY2UgYW5kIGNvbnNpc3RlbmN5IGluIGFsbCBicm93c2Vyc1xuXG5idXR0b24sXG5pbnB1dCxcbnNlbGVjdCxcbnRleHRhcmVhIHtcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7IC8vIDFcbiAgZm9udC1zaXplOiAxMDAlOyAvLyAyXG4gIG1hcmdpbjogMDsgLy8gM1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7IC8vIDRcbiAgQGlmICRsZWdhY3lfc3VwcG9ydF9mb3JfaWUge1xuICAgICp2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyAvLyA0XG4gIH1cbn1cblxuLy8gQWRkcmVzc2VzIEZGMy80IHNldHRpbmcgbGluZS1oZWlnaHQgb24gJ2lucHV0JyB1c2luZyAhaW1wb3J0YW50IGluIHRoZSBVQSBzdHlsZXNoZWV0XG5cbmJ1dHRvbiwgaW5wdXQge1xuICBsaW5lLWhlaWdodDogbm9ybWFsO1xufVxuXG4vLyBBZGRyZXNzIGluY29uc2lzdGVudCBgdGV4dC10cmFuc2Zvcm1gIGluaGVyaXRhbmNlIGZvciBgYnV0dG9uYCBhbmQgYHNlbGVjdGAuXG4vLyBBbGwgb3RoZXIgZm9ybSBjb250cm9sIGVsZW1lbnRzIGRvIG5vdCBpbmhlcml0IGB0ZXh0LXRyYW5zZm9ybWAgdmFsdWVzLlxuLy8gQ29ycmVjdCBgYnV0dG9uYCBzdHlsZSBpbmhlcml0YW5jZSBpbiBDaHJvbWUsIFNhZmFyaSA1KywgYW5kIElFIDgrLlxuLy8gQ29ycmVjdCBgc2VsZWN0YCBzdHlsZSBpbmhlcml0YW5jZSBpbiBGaXJlZm94IDQrIGFuZCBPcGVyYS5cblxuYnV0dG9uLFxuc2VsZWN0IHtcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG59XG5cbi8vIDEuIEF2b2lkIHRoZSBXZWJLaXQgYnVnIGluIEFuZHJvaWQgNC4wLiogd2hlcmUgKDIpIGRlc3Ryb3lzIG5hdGl2ZSBgYXVkaW9gXG4vLyAgICBhbmQgYHZpZGVvYCBjb250cm9sc1xuLy8gMi4gQ29ycmVjdHMgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSAnaW5wdXQnIHR5cGVzIGluIGlPU1xuLy8gMy4gSW1wcm92ZXMgdXNhYmlsaXR5IGFuZCBjb25zaXN0ZW5jeSBvZiBjdXJzb3Igc3R5bGUgYmV0d2VlbiBpbWFnZS10eXBlXG4vLyAgICAnaW5wdXQnIGFuZCBvdGhlcnNcbi8vIDQuIFJlbW92ZXMgaW5uZXIgc3BhY2luZyBpbiBJRTcgd2l0aG91dCBhZmZlY3Rpbmcgbm9ybWFsIHRleHQgaW5wdXRzXG4vLyAgICBLbm93biBpc3N1ZTogaW5uZXIgc3BhY2luZyByZW1haW5zIGluIElFNlxuXG5idXR0b24sXG5odG1sIGlucHV0W3R5cGU9XCJidXR0b25cIl0sIC8vIDFcbmlucHV0W3R5cGU9XCJyZXNldFwiXSxcbmlucHV0W3R5cGU9XCJzdWJtaXRcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgLy8gMlxuICBjdXJzb3I6IHBvaW50ZXI7IC8vIDNcbiAgQGlmICRsZWdhY3lfc3VwcG9ydF9mb3JfaWUge1xuICAgICpvdmVyZmxvdzogdmlzaWJsZTsgIC8vIDRcbiAgfVxufVxuXG4vLyBSZS1zZXQgZGVmYXVsdCBjdXJzb3IgZm9yIGRpc2FibGVkIGVsZW1lbnRzXG5cbmJ1dHRvbltkaXNhYmxlZF0sXG5pbnB1dFtkaXNhYmxlZF0ge1xuICBjdXJzb3I6IGRlZmF1bHQ7XG59XG5cbi8vIFJlbW92ZXMgaW5uZXIgcGFkZGluZyBhbmQgYm9yZGVyIGluIEZGMytcbi8vIHd3dy5zaXRlcGVuLmNvbS9ibG9nLzIwMDgvMDUvMTQvdGhlLWRldmlscy1pbi10aGUtZGV0YWlscy1maXhpbmctZG9qb3MtdG9vbGJhci1idXR0b25zL1xuXG5idXR0b24sIGlucHV0IHtcbiAgJjo6LW1vei1mb2N1cy1pbm5lciB7XG4gICAgYm9yZGVyOiAwO1xuICAgIHBhZGRpbmc6IDA7XG4gIH1cbn1cblxuLy8gMS4gUmVtb3ZlcyBkZWZhdWx0IHZlcnRpY2FsIHNjcm9sbGJhciBpbiBJRTYvNy84Lzlcbi8vIDIuIEltcHJvdmVzIHJlYWRhYmlsaXR5IGFuZCBhbGlnbm1lbnQgaW4gYWxsIGJyb3dzZXJzXG5cbnRleHRhcmVhIHtcbiAgb3ZlcmZsb3c6IGF1dG87IC8vIDFcbiAgdmVydGljYWwtYWxpZ246IHRvcDsgLy8gMlxufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gVGFibGVzXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBSZW1vdmUgbW9zdCBzcGFjaW5nIGJldHdlZW4gdGFibGUgY2VsbHNcblxudGFibGUge1xuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICBib3JkZXItc3BhY2luZzogMDtcbn1cblxuaW5wdXQge1xuICAvLyAxLiBBZGRyZXNzZXMgYXBwZWFyYW5jZSBzZXQgdG8gc2VhcmNoZmllbGQgaW4gUzUsIENocm9tZVxuICAvLyAyLiBBZGRyZXNzZXMgYm94LXNpemluZyBzZXQgdG8gYm9yZGVyLWJveCBpbiBTNSwgQ2hyb21lIChpbmNsdWRlIC1tb3ogdG8gZnV0dXJlLXByb29mKVxuICAmW3R5cGU9XCJzZWFyY2hcIl0ge1xuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkOyAvLyAxXG4gICAgLW1vei1ib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgICAtd2Via2l0LWJveC1zaXppbmc6IGNvbnRlbnQtYm94OyAvLyAyXG4gICAgYm94LXNpemluZzogY29udGVudC1ib3g7XG5cbiAgICAvLyBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgc2VhcmNoIGNhbmNlbCBidXR0b24gaW4gU2FmYXJpIDUgYW5kIENocm9tZVxuICAgIC8vIG9uIE9TIFguXG4gICAgJjo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbixcbiAgICAmOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcbiAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgICB9XG4gIH1cblxuICAvLyAxLiBBZGRyZXNzIGJveCBzaXppbmcgc2V0IHRvIGBjb250ZW50LWJveGAgaW4gSUUgOC85LzEwLlxuICAvLyAyLiBSZW1vdmUgZXhjZXNzIHBhZGRpbmcgaW4gSUUgOC85LzEwLlxuICAvLyAzLiBSZW1vdmVzIGV4Y2VzcyBwYWRkaW5nIGluIElFN1xuICAvLyAgICBLbm93biBpc3N1ZTogZXhjZXNzIHBhZGRpbmcgcmVtYWlucyBpbiBJRTZcbiAgJlt0eXBlPVwiY2hlY2tib3hcIl0sXG4gICZbdHlwZT1cInJhZGlvXCJdIHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvLyAxXG4gICAgcGFkZGluZzogMDsgLy8gMlxuICAgIEBpZiAkbGVnYWN5X3N1cHBvcnRfZm9yX2llIHtcbiAgICAgICpoZWlnaHQ6IDEzcHg7IC8vIDNcbiAgICAgICp3aWR0aDogMTNweDsgLy8gM1xuICAgIH1cbiAgfVxufVxuIiwic2VjdGlvbiB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gIEBpbmNsdWRlIGNvbHVtbnMoKDEpLCAkY29udGFpbmVyLXdpZHRoOiA4MCUpO1xufVxuIiwiLy8gRmxvYXRib3ggR3JpZFxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy9EZWNsYXJlcyB0aGUgY29udGFpbmVyIGVsZW1lbnQgb2YgY2hpbGQgcm93cyBvciBjb2x1bW5zXG5AbWl4aW4gY29sdW1ucyhcblx0JGNvbHVtbnM6XCJcIiwgXG5cdCRjb250YWluZXItd2lkdGg6IHNldHRpbmcoXCJsYXlvdXRcIixcImNvbnRhaW5lci1tYXgtd2lkdGhcIiksXG5cdCRjb250YWluZXItYWxpZ246IFwiXCIsXG5cdCRtYXJnaW46IFwiXCIsXG5cdCRmbHVzaC1tYXJnaW46IHNldHRpbmcoXCJsYXlvdXRcIixcImZsdXNoLW1hcmdpblwiKSxcblx0JGZsdXNoLXBhZGRpbmc6IHNldHRpbmcoXCJsYXlvdXRcIixcImZsdXNoLXBhZGRpbmdcIiksXG5cdCR0YXJnZXQ6IFwiKlwiLFxuXHQkb3JkZXI6IFwiXCJcbikge1xuXHRAaW5jbHVkZSBjb250YWluZXItd2lkdGgoJGNvbnRhaW5lci13aWR0aCk7XG5cdG1hcmdpbi1sZWZ0OiBhdXRvO1xuXHRtYXJnaW4tcmlnaHQ6IGF1dG87XG5cdEBpbmNsdWRlIGNsZWFyLWZpeCgpO1xuXG5cdEBpZiAkY29sdW1ucyAhPSBcIlwiIHtcblx0XHRcblx0XHQkY29sdW1uczogbmV1dHJvbl9jYWxjLWNvbHVtbi1yYXRpbygkY29sdW1ucyk7XG5cdFx0JGNvbHVtbi1zdW06IG5ldXRyb25fc3VtKCRjb2x1bW5zKTtcdFxuXHRcdCRjb2x1bW4tY291bnQ6IGxlbmd0aCgkY29sdW1ucyk7XG5cdFx0JGNvbHVtbi13aWR0aHM6IG5ldXRyb25fY2FsY3VsYXRlLWNvbHVtbi13aWR0aHMoJGNvbHVtbnMpO1x0XG5cdFx0JHRhcmdldC1jaGlsZC1zZWxlY3RvcjogbmV1dHJvbl9jaGlsZC1zZWxlY3RvcigkdGFyZ2V0KTtcblx0XHRcblx0XHQkbWFyZ2luLWxlZnQ6IDA7XG5cdFx0JG1hcmdpbi1yaWdodDogMDtcblx0XHRcblx0XHRAaWYgJG1hcmdpbiAhPSBcIlwiIHtcblx0XHRcdFxuXHRcdFx0Ly9nZXQgbWFyZ2lucyBmb3IgbGVmdCBhbmQgcmlnaHQgb2YgdGhlIGNvbHVtbnNcblx0XHRcdCRtYXJnaW4tbGVmdDogbmV1dHJvbl9leHRyYWN0LXBvc2l0aW9uKCRtYXJnaW4sbGVmdCk7XG5cdFx0XHQkbWFyZ2luLXJpZ2h0OiBuZXV0cm9uX2V4dHJhY3QtcG9zaXRpb24oJG1hcmdpbixyaWdodCk7XG5cdFx0XG5cdFx0fVxuXHRcblx0XHQvL2Fzc2lnbiBjYWxjdWxhdGVkIHdpZHRocyB0byBlbGVtZW50c1xuXHRcdCRpbmRleDogMDtcblx0XHRAZWFjaCAkd2lkdGggaW4gJGNvbHVtbi13aWR0aHMge1x0XG5cdFx0XHQkaW5kZXg6ICRpbmRleCArIDE7XG5cblx0XHRcdCYgPiAjeyR0YXJnZXR9OiN7JHRhcmdldC1jaGlsZC1zZWxlY3Rvcn0oI3skY29sdW1uLWNvdW50fW4rI3skaW5kZXh9KSB7XG5cdFx0XHRcblx0XHRcdFx0JGNhbGMtY29udGVudHM6IFwiI3skd2lkdGh9XCI7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdEBpZiAkbWFyZ2luICE9IFwiXCIge1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdEBpZiAkbWFyZ2luLWxlZnQgIT0gMCB7XG5cdFx0XHRcdFx0XHQkY2FsYy1jb250ZW50czogJGNhbGMtY29udGVudHMgKyBcIiAtICN7JG1hcmdpbi1sZWZ0fVwiO1xuXHRcdFx0XHRcdH1cdFx0XHRcdFx0XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0QGlmICRtYXJnaW4tcmlnaHQgIT0gMCB7XG5cdFx0XHRcdFx0XHQkY2FsYy1jb250ZW50czogJGNhbGMtY29udGVudHMgKyBcIiAtICN7JG1hcmdpbi1yaWdodH1cIjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRAaWYgJGZsdXNoLW1hcmdpbiBhbmQgJG1hcmdpbiAhPSBcIlwiIHtcblx0XHRcdFx0XHRcdCRmbHVzaC1sZWZ0OiAkbWFyZ2luLWxlZnQgLyAkY29sdW1uLWNvdW50O1xuXHRcdFx0XHRcdFx0JGZsdXNoLXJpZ2h0OiAkbWFyZ2luLXJpZ2h0IC8gJGNvbHVtbi1jb3VudDtcblx0XHRcdFx0XHRcdCRjYWxjLWNvbnRlbnRzOiAkY2FsYy1jb250ZW50cyArIFwiICsgI3skZmx1c2gtbGVmdH1cIjtcblx0XHRcdFx0XHRcdCRjYWxjLWNvbnRlbnRzOiAkY2FsYy1jb250ZW50cyArIFwiICsgI3skZmx1c2gtcmlnaHR9XCI7XG5cdFx0XHRcdFx0fVx0XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHdpZHRoOiBjYWxjKCN7JGNhbGMtY29udGVudHN9KTtcblx0XHRcdFx0ZmxvYXQ6bGVmdDtcblx0XHRcdFx0XG5cdFx0XHRcdEBjb250ZW50O1xuXG5cdFx0XHRcdEBpZiAkbWFyZ2luICE9IFwiXCIge1xuXHRcdFx0XHRcdG1hcmdpbjogJG1hcmdpbjtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0Ly9pZiBmaXJzdCBjb2x1bW5cblx0XHRcdFx0QGlmICRpbmRleCA9PSAxIHtcblx0XHRcdFx0XHRjbGVhcjogbGVmdDtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRAaWYgJGZsdXNoLXBhZGRpbmcge1xuXHRcdFx0XHRcdFx0cGFkZGluZy1sZWZ0OiAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRAaWYgJGZsdXNoLW1hcmdpbiB7XG5cdFx0XHRcdFx0XHRtYXJnaW4tbGVmdDogMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gQGVsc2Uge1xuXHRcdFx0XHRcdGNsZWFyOiBub25lO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHQvL2lmIGxhc3QgY29sdW1uXG5cdFx0XHRcdEBpZiAkaW5kZXggPT0gJGNvbHVtbi1jb3VudCB7XG5cdFx0XHRcdFx0QGlmICRmbHVzaC1wYWRkaW5nIHtcblx0XHRcdFx0XHRcdHBhZGRpbmctcmlnaHQ6IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdEBpZiAkZmx1c2gtbWFyZ2luIHtcblx0XHRcdFx0XHRcdG1hcmdpbi1yaWdodDogMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XHRcblx0fVxuXG5cdC8vU2V0IGFsaWdubWVudCBvZiBjb250YWluZXJcblx0QGlmICRjb250YWluZXItYWxpZ24gIT0gXCJcIiB7XG5cdFx0QGluY2x1ZGUgY29udGFpbmVyLWFsaWduKCRjb250YWluZXItYWxpZ24pO1xuXHR9XG5cdFxuXHQvLyBDaGFuZ2Ugb3JkZXIgb2YgY29sdW1uc1xuXHRAaWYgdHlwZS1vZigkb3JkZXIpID09IGxpc3QgYW5kIHR5cGUtb2YoJGNvbHVtbnMpID09IGxpc3Qge1xuXHRcdEBpbmNsdWRlIG9yZGVyKCRvcmRlciwgJGNvbHVtbnMsICRtYXJnaW4sICRmbHVzaC1tYXJnaW4sICR0YXJnZXQpO1xuXHR9XG5cbn1cblxuLy9BbGlhcyBmb3IgY29sdW1ucygpXG5AbWl4aW4gY29sdW1uKCRhcmd1bWVudHMuLi4pIHtcblx0QGluY2x1ZGUgY29sdW1ucygkYXJndW1lbnRzLi4uKSB7XG5cdFx0QGNvbnRlbnQ7XG5cdH07XG59XG5cbkBtaXhpbiBjb2woJGFyZ3VtZW50cy4uLikge1xuXHRAaW5jbHVkZSBjb2x1bW5zKCRhcmd1bWVudHMuLi4pIHtcblx0XHRAY29udGVudDtcblx0fTtcbn1cblxuQG1peGluIGZsb2F0LWNvbHVtbnMoJGFyZ3VtZW50cy4uLikge1xuXHRAaW5jbHVkZSBjb2x1bW5zKCRhcmd1bWVudHMuLi4pIHtcblx0XHRAY29udGVudDtcblx0fTtcbn1cblxuQG1peGluIGZsb2F0LWNvbHVtbigkYXJndW1lbnRzLi4uKSB7XG5cdEBpbmNsdWRlIGNvbHVtbnMoJGFyZ3VtZW50cy4uLikge1xuXHRcdEBjb250ZW50O1xuXHR9O1xufVxuXG5AbWl4aW4gZmxvYXQtY29sKCRhcmd1bWVudHMuLi4pIHtcblx0QGluY2x1ZGUgY29sdW1ucygkYXJndW1lbnRzLi4uKSB7XG5cdFx0QGNvbnRlbnQ7XG5cdH07XG59XG5cbkBtaXhpbiBvcmRlcigkb3JkZXI6IFwiXCIsICRjb2x1bW5zOlwiXCIsICRtYXJnaW46XCJcIiwgJGZsdXNoLW1hcmdpbjpzZXR0aW5nKFwibGF5b3V0XCIsXCJmbHVzaC1tYXJnaW5cIiksICR0YXJnZXQ6XCIqXCIpIHtcblx0XG5cdEBpZiB0eXBlLW9mKCRvcmRlcikgPT0gbGlzdCB7XG5cdFx0XG5cdFx0Ly9pZiBubyByYXRpbyBpcyBzZXQsIHVzZSAkb3JkZXIgdG8gZGV0ZXJtaW5lIG51bWJlciBvZiBlcXVhbCB3aWR0aCBjb2x1bW5zXG5cdFx0QGlmICRjb2x1bW5zID09IFwiXCIge1xuXHRcdFx0JGNvbHVtbnM6IGxlbmd0aCgkb3JkZXIpO1xuXHRcdH1cblxuXHRcdC8vaWYgY29sdW1uIHJhdGlvIGlzIG5vdCBhIGxpc3QsIGdlbmVyYXRlIGl0XG5cdFx0JGNvbHVtbnM6IG5ldXRyb25fY2FsYy1jb2x1bW4tcmF0aW8oJGNvbHVtbnMpO1xuXHRcdCRjb2x1bW4tc3VtOiBuZXV0cm9uX3N1bSgkY29sdW1ucyk7XG5cdFx0JGNvbHVtbi1jb3VudDogbGVuZ3RoKCRjb2x1bW5zKTtcblx0XHQkdGFyZ2V0LWNoaWxkLXNlbGVjdG9yOiBuZXV0cm9uX2NoaWxkLXNlbGVjdG9yKCR0YXJnZXQpO1xuXHRcdFx0XHRcblx0XHQkbWFyZ2luLWxlZnQ6IDA7XG5cdFx0JG1hcmdpbi1yaWdodDogMDtcblx0XHRcblx0XHRAaWYgJG1hcmdpbiAhPSBcIlwiIHtcdFxuXHRcdFx0JG1hcmdpbi1sZWZ0OiBuZXV0cm9uX2V4dHJhY3QtcG9zaXRpb24oJG1hcmdpbixsZWZ0KTtcblx0XHRcdCRtYXJnaW4tcmlnaHQ6IG5ldXRyb25fZXh0cmFjdC1wb3NpdGlvbigkbWFyZ2luLHJpZ2h0KTtcblx0XHR9XG5cdFx0XG5cdFx0Ly9jYWxjdWxhdGUgd2lkdGggb2YgZWFjaCBjb2x1bW5cblx0XHQkY29sdW1uLXdpZHRoLXN0cmluZzooKTtcblxuXHRcdCRpOiAwO1xuXHRcdCRjb2x1bW5zLW9mZnNldDogKCk7XG5cdFx0QGVhY2ggJGNvbHVtbiBpbiAkY29sdW1ucyB7XG5cdFx0XHQkaTogJGkgKyAxO1xuXHRcdFx0XG5cdFx0XHQvLyBjYWxjdWxhdGUgY29sdW1uIHdpZHRocyBcblx0XHRcdCRjb2wtd2lkdGg6ICgxMDAlIC8gJGNvbHVtbi1zdW0pICogJGNvbHVtbjtcblx0XHRcdFxuXHRcdFx0QGlmICRtYXJnaW4gIT0gXCJcIiB7XG5cdFx0XHRcdEBpZiAkZmx1c2gtbWFyZ2luIHtcblx0XHRcdFx0XHQkZmx1c2gtbGVmdDogJG1hcmdpbi1sZWZ0IC8gJGNvbHVtbi1jb3VudDtcblx0XHRcdFx0XHQkZmx1c2gtcmlnaHQ6ICRtYXJnaW4tcmlnaHQgLyAkY29sdW1uLWNvdW50O1xuXHRcdFx0XHRcdCRmbHVzaDogJGZsdXNoLWxlZnQgKyAkZmx1c2gtcmlnaHQ7XG5cdFx0XHRcdFx0JGNvbC13aWR0aDogJGNvbC13aWR0aCArIFwiICsgI3skZmx1c2h9XCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0JGNvbHVtbi13aWR0aC1zdHJpbmc6IGFwcGVuZCgkY29sdW1uLXdpZHRoLXN0cmluZywgXCIoI3skY29sLXdpZHRofSlcIiwgY29tbWEpO1xuXHRcdFx0XHRcdFxuXHRcdFx0Ly8gZ2V0IHN1bSBvZiBsZWZ0IG9mZnNldCBvZiBjb2x1bW5zIHRoYXQgY29tZSBiZWZvcmUgY3VycmVudCBvcmlnaW5hbCBwb3NpdGlvblxuXHRcdFx0JGN1cnJlbnQtaW5kZXg6IDA7XG5cdFx0XHQkY3VycmVudC1vZmZzZXQ6IFwiMHB4XCI7XG5cdFx0XHRcblx0XHRcdEB3aGlsZSAkY3VycmVudC1pbmRleCA8ICRpIHtcblx0XHRcdFx0JGN1cnJlbnQtaW5kZXg6ICRjdXJyZW50LWluZGV4ICsgMTtcblx0XHRcdFx0XG5cdFx0XHRcdCRhZGQtb2Zmc2V0OiBudGgoJGNvbHVtbi13aWR0aC1zdHJpbmcsICRjdXJyZW50LWluZGV4KTtcblx0XHRcdFx0JGN1cnJlbnQtb2Zmc2V0OiAkY3VycmVudC1vZmZzZXQgKyBcIiArIFwiICsgJGFkZC1vZmZzZXQ7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdCRjdXJyZW50LW9mZnNldDogXCIoXCIgKyAkY3VycmVudC1vZmZzZXQgKyBcIilcIjtcblx0XHRcdCRjb2x1bW5zLW9mZnNldDogYXBwZW5kKCRjb2x1bW5zLW9mZnNldCwgJGN1cnJlbnQtb2Zmc2V0LCBjb21tYSlcblx0XHRcdFxuXHRcdH1cblx0XHRcblx0XHQkbmV3LWNvbHVtbi13aWR0aC1zdHJpbmc6IG5ldXRyb25fcmVvcmRlci1saXN0KCRjb2x1bW4td2lkdGgtc3RyaW5nLCAkb3JkZXIpO1xuXHRcdCRvZmZzZXQtdG90YWxzOiAoKTtcblxuXHRcdC8vaXRlcmF0ZSBvdmVyIGVhY2ggY29sdW1uXG5cdFx0JGk6IDA7XG5cdFx0QGVhY2ggJGNvbHVtbiBpbiAkb3JkZXIge1xuXHRcdFx0JGk6ICRpICsgMTtcblxuXHRcdFx0Ly8gZ2V0IHN1bSBvZiB3aWR0aHMgb2YgY29sdW1ucyB0aGF0IGNvbWUgYmVmb3JlIGN1cnJlbnQgb25lIGFuZCBhZGQgdG8gb2Zmc2V0XG5cdFx0XHQkbmV3LXBvc2l0aW9uOiBpbmRleCgkb3JkZXIsICRjb2x1bW4pO1x0XG5cdFx0XHQkbmV3LW9mZnNldDogXCIwcHhcIjtcblx0XHRcdFxuXHRcdFx0JGluZGV4OiAwO1xuXHRcdFx0QHdoaWxlICRpbmRleCA8ICRuZXctcG9zaXRpb24ge1xuXHRcdFx0XHQkaW5kZXg6ICRpbmRleCArIDE7XG5cdFx0XHRcdFxuXHRcdFx0XHQkbmV3LW9mZnNldDogJG5ldy1vZmZzZXQgKyBcIiArIFwiICsgbnRoKCRuZXctY29sdW1uLXdpZHRoLXN0cmluZywgJGluZGV4KTtcblx0XHRcdH1cblxuXHRcdFx0Ly9HZXQgbGVmdCBvZmZzZXQgcmVxdWlyZWQgZm9yIHRoaXMgY29sdW1uIHRvIHJlc2V0IGNvbHVtbiB0byBsZWZ0IHNpZGUuXG5cdFx0XHQkb3JpLW9mZnNldDogbnRoKCRjb2x1bW5zLW9mZnNldCwgJGNvbHVtbik7XG5cblx0XHRcdCYgPiAjeyR0YXJnZXR9OiN7JHRhcmdldC1jaGlsZC1zZWxlY3Rvcn0oI3skY29sdW1uLWNvdW50fW4rI3skY29sdW1ufSkge1xuXHRcdFx0XHRsZWZ0OiBjYWxjKDBweCAtICgjeyRvcmktb2Zmc2V0fSkgKyAoI3skbmV3LW9mZnNldH0pKTtcblx0XHRcdFx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5AbWl4aW4gY29udGFpbmVyLWFsaWduKCRhbGlnbjpcIlwiKSB7XG5cdC8vU2V0IGFsaWdubWVudCBcblx0QGlmICRhbGlnbiAhPSBcIlwiIHtcblx0XHRmbG9hdDpub25lO1xuXHRcdFxuXHRcdEBpZiAkYWxpZ24gPT0gbGVmdCB7XG5cdFx0XHRtYXJnaW4tbGVmdDogMDtcblx0XHR9XG5cdFx0XG5cdFx0QGlmICRhbGlnbiA9PSByaWdodCB7XG5cdFx0XHRtYXJnaW4tcmlnaHQ6IDA7XG5cdFx0fVxuXHRcdFxuXHRcdEBpZiAkYWxpZ24gPT0gY2VudGVyIHtcblx0XHRcdG1hcmdpbi1yaWdodDogYXV0bztcblx0XHRcdG1hcmdpbi1sZWZ0OiBhdXRvO1xuXHRcdH1cblx0fVxufVxuXG5AbWl4aW4gY29udGFpbmVyLXdpZHRoKCRjb250YWluZXItd2lkdGg6IHNldHRpbmcoXCJsYXlvdXRcIixcImNvbnRhaW5lci1tYXgtd2lkdGhcIikpIHtcblx0bWF4LXdpZHRoOiAkY29udGFpbmVyLXdpZHRoO1xufVxuXG4vLyBVVElMSVRZIEZVTkNUSU9OU1xuQGZ1bmN0aW9uIG5ldXRyb25fcmVvcmRlci1saXN0KCRsaXN0LCAkb3JkZXIpIHtcblx0XG5cdCRuZXctbGlzdDooKTtcblxuXHRAZWFjaCAkaW5kZXggaW4gJG9yZGVyIHtcblx0XHQkaXRlbTogbnRoKCRsaXN0LCAkaW5kZXgpO1xuXHRcdCRuZXctbGlzdDogYXBwZW5kKCRuZXctbGlzdCwgJGl0ZW0sIGNvbW1hKTtcblx0fVxuXHRcblx0QHJldHVybiAkbmV3LWxpc3Q7XG59XG5cbkBmdW5jdGlvbiBuZXV0cm9uX2NhbGN1bGF0ZS1jb2x1bW4td2lkdGhzKCRjb2x1bW4tcmF0aW8pIHtcblx0XG5cdCRjb2x1bW4tc3VtOiBuZXV0cm9uX3N1bSgkY29sdW1uLXJhdGlvKTtcblx0JGNvbHVtbi1jb3VudDogbGVuZ3RoKCRjb2x1bW4tcmF0aW8pO1xuXHQkY29sdW1uLXdpZHRoczogKCk7XG5cblx0Ly9EZXRlcm1pbmUgd2lkdGggb2YgZWFjaCBjb2x1bW5cblx0QGVhY2ggJGNvbHVtbiBpbiAkY29sdW1uLXJhdGlvIHtcblx0XHQkd2lkdGg6ICgxMDAlIC8gJGNvbHVtbi1zdW0pICogJGNvbHVtbjtcblx0XHQkY29sdW1uLXdpZHRoczogYXBwZW5kKCRjb2x1bW4td2lkdGhzLCAkd2lkdGgsIGNvbW1hKTtcblx0fVxuXHRcblx0QHJldHVybiAkY29sdW1uLXdpZHRocztcbn1cblxuQGZ1bmN0aW9uIG5ldXRyb25fY2FsYy1jb2x1bW4tcmF0aW8oJGNvbHVtbnMpIHtcblx0JGNvbHVtbi1yYXRpbzogJGNvbHVtbnM7XG5cdFxuXHRAaWYgdHlwZS1vZigkY29sdW1ucykgIT0gbGlzdCB7XG5cdFx0JGNvbHVtbi1yYXRpbzogKCk7XG5cdFx0XG5cdFx0QGZvciAkaSBmcm9tIDEgdGhyb3VnaCAkY29sdW1ucyB7XG5cdFx0XHQkY29sdW1uLXJhdGlvOiBhcHBlbmQoJGNvbHVtbi1yYXRpbywgMSwgY29tbWEpO1xuXHRcdH1cblx0fVxuXHRcblx0QHJldHVybiAkY29sdW1uLXJhdGlvO1xufVxuXG5AZnVuY3Rpb24gbmV1dHJvbl9jaGlsZC1zZWxlY3RvcigkdGFyZ2V0LXNlbGVjdG9yKSB7XG5cdCRjaGlsZC1zZWxlY3RvcjogXCJudGgtb2YtdHlwZVwiO1xuXHRcblx0QGlmICR0YXJnZXQtc2VsZWN0b3IgPT0gXCIqXCIge1xuXHRcdCRjaGlsZC1zZWxlY3RvcjogXCJudGgtY2hpbGRcIjtcblx0fVxuXHRcblx0QHJldHVybiAkY2hpbGQtc2VsZWN0b3I7XG59XG4iLCIvLyBVdGlsaXRpZXNcclxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbi8vaGlkZXMgdGhlIGVsZW1lbnQgd2hlbiB0aGUgXHJcbi8vcHJvdmlkZWQgbWVkaWEgcXVlcnkgaXMgc3VwcGxpZWQuXHJcbkBtaXhpbiBoaWRlKCRicmVha3BvaW50OiBcIlwiKSB7XHJcblx0QGlmICRicmVha3BvaW50ICE9IFwiXCIge1xyXG5cdFx0XHJcblx0XHRAaW5jbHVkZSBicmVha3BvaW50KCRicmVha3BvaW50KSB7XHJcblx0XHRcdCYge1xyXG5cdFx0XHRcdGRpc3BsYXk6IG5vbmU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9IEBlbHNlIHtcclxuXHRcdGRpc3BsYXk6IG5vbmU7XHJcblx0fVxyXG59XHJcblxyXG4vL3Nob3dzIHRoZSBlbGVtZW50IHdoZW4gdGhlIFxyXG4vL3Byb3ZpZGVkIG1lZGlhIHF1ZXJ5IGlzIHN1cHBsaWVkLlxyXG5AbWl4aW4gc2hvdygkYnJlYWtwb2ludDogXCJcIikge1xyXG5cdEBpZiAkYnJlYWtwb2ludCAhPSBcIlwiIHtcclxuXHRcdFxyXG5cdFx0QGluY2x1ZGUgYnJlYWtwb2ludCgkYnJlYWtwb2ludCkge1xyXG5cdFx0XHQmIHtcclxuXHRcdFx0XHRkaXNwbGF5OiBibG9jaztcclxuXHRcdFx0XHRkaXNwbGF5OiBpbml0aWFsO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSBAZWxzZSB7XHJcblx0XHRkaXNwbGF5OiBibG9jaztcclxuXHRcdGRpc3BsYXk6IGluaXRpYWw7XHJcblx0fVxyXG5cclxufVxyXG5cclxuLy9BZGRzIGJsb2NrIGVsZW1lbnQgc2VsZiBjbGVhcmluZ1xyXG5AbWl4aW4gY2xlYXItZml4KCkge1xyXG5cclxuXHQmOmFmdGVyIHtcclxuXHRcdGNvbnRlbnQ6IFwiXCI7XHJcblx0XHRkaXNwbGF5OiB0YWJsZTtcclxuXHRcdGNsZWFyOiBib3RoO1xyXG5cdH1cclxuXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9 */
