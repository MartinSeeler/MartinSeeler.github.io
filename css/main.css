@import url(https://fonts.googleapis.com/css?family=Enriqueta:400,700);

@import url(https://fonts.googleapis.com/css?family=Amatic+SC:700);

@import url(https://fonts.googleapis.com/css?family=Londrina+Solid);

html {
  box-sizing: border-box;
}

html * {
  box-sizing: inherit;
}

body {
  max-width: 960px;
  margin-left: auto;
  margin-right: auto;
}

html {
  font-family: "Enriqueta";
  font-weight: 300;
  color: #666;
  font-size: 16px;
  line-height: 1.75em;
}

@media (min-width: 600px) {
  html {
    font-size: -webkit-calc( 16px + (24 - 16) * ((100vw - 600px) / (1000 - 600)));
    font-size: calc( 16px + (24 - 16) * ((100vw - 600px) / (1000 - 600)));
  }
}

@media (min-width: 1000px) {
  html {
    font-size: 24px;
  }
}

h1,
h2,
p,
blockquote,
pre,
a,
code,
em,
img,
strong,
ul,
li {
  margin: 0;
  padding: 0;
}

p,
blockquote,
pre,
ul {
  margin-bottom: 1.75em;
}

h1,
h2 {
  font-family: "Londrina Solid","serif";
  font-weight: 500;
  color: #111;
  clear: both;
}

h1 {
  font-size: 37.13919px;
  margin-top: 0.9424em;
  line-height: 1.13088em;
  margin-bottom: 0.18848em;
}

@media (min-width: 600px) {
  h1 {
    font-size: -webkit-calc( 37.13919px + (55.70878 - 37.13919) * ((100vw - 600px) / (1000 - 600)));
    font-size: calc( 37.13919px + (55.70878 - 37.13919) * ((100vw - 600px) / (1000 - 600)));
  }
}

@media (min-width: 1000px) {
  h1 {
    font-size: 55.70878px;
    margin-top: 0.9424em;
    line-height: 1.13088em;
    margin-bottom: 0.18848em;
  }
}

h2 {
  font-size: 31.38267px;
  margin-top: 1.11527em;
  line-height: 1.33832em;
  margin-bottom: 0.24438em;
}

@media (min-width: 600px) {
  h2 {
    font-size: -webkit-calc( 31.38267px + (47.07401 - 31.38267) * ((100vw - 600px) / (1000 - 600)));
    font-size: calc( 31.38267px + (47.07401 - 31.38267) * ((100vw - 600px) / (1000 - 600)));
  }
}

@media (min-width: 1000px) {
  h2 {
    font-size: 47.07401px;
    margin-top: 1.11527em;
    line-height: 1.33832em;
    margin-bottom: 0.23727em;
  }
}

blockquote {
  font-style: italic;
}

pre {
  padding: 0.875em;
  margin-bottom: 1.75em;
}

pre code {
  padding: 0;
}

code {
  font-family: "Courier New","Courier","Lucida Sans Typewriter","Lucida Typewriter","monospace";
  padding: 0.0875em 0.2625em;
  line-height: 0;
}

ul {
  padding-left: 1.1em;
}

html,
body {
  float: none;
  margin-right: auto;
  margin-left: auto;
  max-width: 95%;
}

@media (min-width: 1024px) {
  html,
  body {
    max-width: 80%;
  }
}

section,
article {
  max-width: 960px;
  margin-left: auto;
  margin-right: auto;
}

section:after,
article:after {
  content: "";
  display: table;
  clear: both;
}

section>*:nth-child(1n+1),
article>*:nth-child(1n+1) {
  width: -webkit-calc(100%);
  width: calc(100%);
  float: left;
  clear: left;
  margin-left: 0;
  margin-right: 0;
}

/*# sourceMappingURL=data:application/json;base64, */
